package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"fmt"
	"strconv"

	"github.com/CutyDog/mint-flea/services/gateway/graph/model"
)

// Wallets is the resolver for the wallets field.
func (r *accountResolver) Wallets(ctx context.Context, obj *model.Account) ([]*model.Wallet, error) {
	accountId, err := strconv.ParseInt(obj.ID, 10, 64)
	if err != nil {
		return nil, fmt.Errorf("failed to parse account ID: %w", err)
	}

	wallets, err := r.WalletClient.ListWallets(ctx, accountId)
	if err != nil {
		return nil, fmt.Errorf("failed to list wallets: %w", err)
	}

	walletsModel := make([]*model.Wallet, len(wallets))
	for i, wallet := range wallets {
		walletsModel[i] = &model.Wallet{
			ID:        fmt.Sprintf("%d", wallet.Id),
			Address:   wallet.Address,
			ChainID:   int32(wallet.ChainId),
			IsMain:    wallet.IsMain,
			CreatedAt: wallet.CreatedAt.AsTime().Format("2006-01-02T15:04:05Z07:00"),
			UpdatedAt: wallet.UpdatedAt.AsTime().Format("2006-01-02T15:04:05Z07:00"),
		}
	}

	return walletsModel, nil
}

// MainWallet is the resolver for the mainWallet field.
func (r *accountResolver) MainWallet(ctx context.Context, obj *model.Account) (*model.Wallet, error) {
	accountId, err := strconv.ParseInt(obj.ID, 10, 64)
	if err != nil {
		return nil, fmt.Errorf("failed to parse account ID: %w", err)
	}

	wallet, err := r.WalletClient.GetMainWallet(ctx, accountId)
	if err != nil {
		return nil, fmt.Errorf("failed to get main wallet: %w", err)
	}

	if wallet == nil {
		return nil, nil
	}

	return &model.Wallet{
		ID:        fmt.Sprintf("%d", wallet.Id),
		Address:   wallet.Address,
		ChainID:   int32(wallet.ChainId),
		IsMain:    wallet.IsMain,
		CreatedAt: wallet.CreatedAt.AsTime().Format("2006-01-02T15:04:05Z07:00"),
		UpdatedAt: wallet.UpdatedAt.AsTime().Format("2006-01-02T15:04:05Z07:00"),
	}, nil
}

// Account is the resolver for the account field.
func (r *walletResolver) Account(ctx context.Context, obj *model.Wallet) (*model.Account, error) {
	// AccountClientにはGetAccountByIDがないため、一時的にnilを返す
	// TODO: AccountClientにGetAccountByIDメソッドを追加するか、別の方法でアカウント情報を取得
	return nil, fmt.Errorf("GetAccountByID not implemented")
}

// Account returns AccountResolver implementation.
func (r *Resolver) Account() AccountResolver { return &accountResolver{r} }

// Wallet returns WalletResolver implementation.
func (r *Resolver) Wallet() WalletResolver { return &walletResolver{r} }

type accountResolver struct{ *Resolver }
type walletResolver struct{ *Resolver }
